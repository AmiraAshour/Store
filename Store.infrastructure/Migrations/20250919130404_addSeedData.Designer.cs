// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Store.infrastructure.Data;

#nullable disable

namespace Store.infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250919130404_addSeedData")]
    partial class addSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Store.Core.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Store.Core.Entities.Order.DeliveryMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DeliveryTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("DeliveryMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeliveryTime = "1-2 days",
                            Description = "Fast delivery",
                            Name = "Fast",
                            Price = 10m
                        },
                        new
                        {
                            Id = 2,
                            DeliveryTime = "5-7 days",
                            Description = "Economy delivery",
                            Name = "Slow",
                            Price = 5m
                        });
                });

            modelBuilder.Entity("Store.Core.Entities.Order.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MainImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrdersId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductItemId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quntity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrdersId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Store.Core.Entities.Order.Orders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentIntentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("deliveryMethodId")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("deliveryMethodId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Store.Core.Entities.ProductEntity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Skin care products",
                            Name = "Skin Care"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Hair care products",
                            Name = "Hair Care"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Makeup and cosmetics",
                            Name = "Makeup"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Body care products",
                            Name = "Body Care"
                        });
                });

            modelBuilder.Entity("Store.Core.Entities.ProductEntity.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Photos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImageName = "images/Bio Soft Deep Conditioner/bio-soft-deep-conditioner-500g.jpg",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            ImageName = "images/Bobai Sun Screen/bobai-extra-lightening-sun-screen-gel-50gm.jpg",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            ImageName = "images/Dermatique Sun/dermatique-sun-mattifying-fluid-50ml.jpg",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 4,
                            ImageName = "images/Essence Lip Balm/essence-juicy-melon-tinted-lip-cheek-balm.jpg",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 5,
                            ImageName = "images/Lebelage Serum/lebelage-truly-serum-35ml.jpg",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 6,
                            ImageName = "images/Leylak Eye Gel/leylak-eye-contour-gel-15ml.jpg",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 7,
                            ImageName = "images/Loreal Retouch/loreal-brown-magic-retouch-75ml.png",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 8,
                            ImageName = "images/Moist 1 Cream/moist-1-cream-moisturizing-cream-100g.jpg",
                            ProductId = 8
                        },
                        new
                        {
                            Id = 9,
                            ImageName = "images/Olaplex/olaplex-no.3-hair-perfector-100ml.png",
                            ProductId = 9
                        },
                        new
                        {
                            Id = 10,
                            ImageName = "images/ORS Argan Oil/ors-argan-oil-spray.png",
                            ProductId = 10
                        },
                        new
                        {
                            Id = 11,
                            ImageName = "images/Purederm Mask/purederm-black-bubble-mask.png",
                            ProductId = 11
                        },
                        new
                        {
                            Id = 12,
                            ImageName = "images/Raw African Oil/raw-african-follicle-booster-oil-100ml.jpg",
                            ProductId = 12
                        },
                        new
                        {
                            Id = 13,
                            ImageName = "images/Seropipe Shampoo/seropipe-hair-shampoo-300ml.jpg",
                            ProductId = 13
                        },
                        new
                        {
                            Id = 14,
                            ImageName = "images/Shaan Remover/shaan-make-up-remover-200ml-600x600.jpg",
                            ProductId = 14
                        },
                        new
                        {
                            Id = 15,
                            ImageName = "images/Sheglam Concealer/sheglam-complexation-boost-concealer-acorn.jpg",
                            ProductId = 15
                        },
                        new
                        {
                            Id = 16,
                            ImageName = "images/Sheglam Lip Blush/sheglam-jelly-licious-hydrating-lip-blush-tint-aho.jpg",
                            ProductId = 16
                        },
                        new
                        {
                            Id = 17,
                            ImageName = "images/Sheglam Liquid Blush/sheglam-liquid-blush-petal-talk.jpg",
                            ProductId = 17
                        },
                        new
                        {
                            Id = 18,
                            ImageName = "images/Sheglam Powder/sheglam-setting-powder-duo-bisque-600x601.jpg",
                            ProductId = 18
                        },
                        new
                        {
                            Id = 19,
                            ImageName = "images/Wet n Wild/wet-n-wild-photofocus-foundation-362-soft-ivory.jpg",
                            ProductId = 19
                        },
                        new
                        {
                            Id = 20,
                            ImageName = "images/Maybelline Concealer/maybelline-fit-me-concealer-20-sand.jpg",
                            ProductId = 20
                        },
                        new
                        {
                            Id = 21,
                            ImageName = "images/Shaan Body Milk/shaan-body-milk-300ml.jpg",
                            ProductId = 21
                        },
                        new
                        {
                            Id = 22,
                            ImageName = "images/Mood Shower Gel/mood-shower-gel-750ml.jpg",
                            ProductId = 22
                        },
                        new
                        {
                            Id = 23,
                            ImageName = "images/Skin Candy Oil/skin-candy-perfumed-hair-body-oil-50ml.jpg",
                            ProductId = 23
                        },
                        new
                        {
                            Id = 24,
                            ImageName = "images/Starville Roll On/starville-roll-on.jpg",
                            ProductId = 24
                        },
                        new
                        {
                            Id = 25,
                            ImageName = "images/Bodylicious Lotion/bodylicious-body-lotion-236ml.jpg",
                            ProductId = 25
                        },
                        new
                        {
                            Id = 26,
                            ImageName = "images/Watsons Body Mousse/watsons-body-mousse-75ml.jpg",
                            ProductId = 26
                        },
                        new
                        {
                            Id = 27,
                            ImageName = "images/Skin Candy Deodorant/skin-candy-deodorant-cream.png",
                            ProductId = 27
                        });
                });

            modelBuilder.Entity("Store.Core.Entities.ProductEntity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AverageRating")
                        .HasColumnType("float");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("NewPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("OldPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ReviewCount")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageRating = 0.0,
                            CategoryId = 2,
                            Description = "Deep nourishing conditioner 500g",
                            Name = "Bio Soft Deep Conditioner",
                            NewPrice = 150m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 2,
                            AverageRating = 0.0,
                            CategoryId = 1,
                            Description = "Extra lightening sunscreen gel 50gm",
                            Name = "Bobai Extra Lightening Sun Screen",
                            NewPrice = 140m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 3,
                            AverageRating = 0.0,
                            CategoryId = 1,
                            Description = "Mattifying sun fluid 50ml",
                            Name = "Dermatique Sun Mattifying Fluid",
                            NewPrice = 160m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 4,
                            AverageRating = 0.0,
                            CategoryId = 3,
                            Description = "Tinted lip cheek balm",
                            Name = "Essence Juicy Melon Lip Balm",
                            NewPrice = 80m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 5,
                            AverageRating = 0.0,
                            CategoryId = 1,
                            Description = "Truly skin serum 35ml",
                            Name = "Lebelage Truly Serum",
                            NewPrice = 120m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 6,
                            AverageRating = 0.0,
                            CategoryId = 1,
                            Description = "Eye contour gel 15ml",
                            Name = "Leylak Eye Contour Gel",
                            NewPrice = 110m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 7,
                            AverageRating = 0.0,
                            CategoryId = 3,
                            Description = "Magic retouch 75ml",
                            Name = "Loreal Brown Magic Retouch",
                            NewPrice = 100m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 8,
                            AverageRating = 0.0,
                            CategoryId = 1,
                            Description = "Moisturizing cream 100g",
                            Name = "Moist 1 Cream",
                            NewPrice = 130m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 9,
                            AverageRating = 0.0,
                            CategoryId = 2,
                            Description = "Hair perfector 100ml",
                            Name = "Olaplex No.3 Hair Perfector",
                            NewPrice = 200m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 10,
                            AverageRating = 0.0,
                            CategoryId = 2,
                            Description = "Argan oil spray",
                            Name = "ORS Argan Oil Spray",
                            NewPrice = 150m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 11,
                            AverageRating = 0.0,
                            CategoryId = 1,
                            Description = "Black bubble mask",
                            Name = "Purederm Black Bubble Mask",
                            NewPrice = 70m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 12,
                            AverageRating = 0.0,
                            CategoryId = 2,
                            Description = "Follicle booster oil 100ml",
                            Name = "Raw African Follicle Booster Oil",
                            NewPrice = 160m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 13,
                            AverageRating = 0.0,
                            CategoryId = 2,
                            Description = "Shampoo 300ml",
                            Name = "Seropipe Hair Shampoo",
                            NewPrice = 140m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 14,
                            AverageRating = 0.0,
                            CategoryId = 1,
                            Description = "Make-up remover 200ml",
                            Name = "Shaan Make Up Remover",
                            NewPrice = 90m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 15,
                            AverageRating = 0.0,
                            CategoryId = 3,
                            Description = "Boost concealer Acorn",
                            Name = "Sheglam Complexion Boost Concealer",
                            NewPrice = 110m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 16,
                            AverageRating = 0.0,
                            CategoryId = 3,
                            Description = "Hydrating lip blush tint",
                            Name = "Sheglam Jelly Licious Lip Blush",
                            NewPrice = 100m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 17,
                            AverageRating = 0.0,
                            CategoryId = 3,
                            Description = "Liquid blush Petal Talk",
                            Name = "Sheglam Liquid Blush Petal Talk",
                            NewPrice = 95m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 18,
                            AverageRating = 0.0,
                            CategoryId = 3,
                            Description = "Setting powder duo Bisque",
                            Name = "Sheglam Setting Powder Duo",
                            NewPrice = 105m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 19,
                            AverageRating = 0.0,
                            CategoryId = 3,
                            Description = "Photo focus foundation soft ivory",
                            Name = "Wet n Wild Foundation",
                            NewPrice = 170m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 20,
                            AverageRating = 0.0,
                            CategoryId = 3,
                            Description = "Concealer Sand 20",
                            Name = "Maybelline Fit Me Concealer",
                            NewPrice = 150m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 21,
                            AverageRating = 0.0,
                            CategoryId = 4,
                            Description = "Body milk 300ml",
                            Name = "Shaan Body Milk",
                            NewPrice = 120m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 22,
                            AverageRating = 0.0,
                            CategoryId = 4,
                            Description = "Shower gel 750ml",
                            Name = "Mood Shower Gel",
                            NewPrice = 140m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 23,
                            AverageRating = 0.0,
                            CategoryId = 4,
                            Description = "Perfumed hair & body oil 50ml",
                            Name = "Skin Candy Perfumed Hair Body Oil",
                            NewPrice = 160m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 24,
                            AverageRating = 0.0,
                            CategoryId = 4,
                            Description = "Roll-on deodorant",
                            Name = "Starville Roll On",
                            NewPrice = 90m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 25,
                            AverageRating = 0.0,
                            CategoryId = 4,
                            Description = "Body lotion 236ml",
                            Name = "Bodylicious Body Lotion",
                            NewPrice = 150m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 26,
                            AverageRating = 0.0,
                            CategoryId = 4,
                            Description = "Body mousse 75ml",
                            Name = "Watsons Body Mousse",
                            NewPrice = 130m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        },
                        new
                        {
                            Id = 27,
                            AverageRating = 0.0,
                            CategoryId = 4,
                            Description = "Deodorant cream",
                            Name = "Skin Candy Deodorant Cream",
                            NewPrice = 110m,
                            OldPrice = 0m,
                            ReviewCount = 0,
                            Stock = 0
                        });
                });

            modelBuilder.Entity("Store.Core.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BuyerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Store.Core.Entities.WishlistItem", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("Store.Core.Entities.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DispalyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.HasDiscriminator().HasValue("AppUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Store.Core.Entities.Address", b =>
                {
                    b.HasOne("Store.Core.Entities.AppUser", "AppUser")
                        .WithMany("Address")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AppUser_Address");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Store.Core.Entities.Order.OrderItem", b =>
                {
                    b.HasOne("Store.Core.Entities.Order.Orders", null)
                        .WithMany("orderItems")
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Store.Core.Entities.Order.Orders", b =>
                {
                    b.HasOne("Store.Core.Entities.Order.DeliveryMethod", "deliveryMethod")
                        .WithMany()
                        .HasForeignKey("deliveryMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Store.Core.Entities.Order.ShippingAddress", "shippingAddress", b1 =>
                        {
                            b1.Property<int>("OrdersId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrdersId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrdersId");
                        });

                    b.Navigation("deliveryMethod");

                    b.Navigation("shippingAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("Store.Core.Entities.ProductEntity.Photo", b =>
                {
                    b.HasOne("Store.Core.Entities.ProductEntity.Product", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Store.Core.Entities.ProductEntity.Product", b =>
                {
                    b.HasOne("Store.Core.Entities.ProductEntity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Store.Core.Entities.WishlistItem", b =>
                {
                    b.HasOne("Store.Core.Entities.ProductEntity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Core.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Store.Core.Entities.Order.Orders", b =>
                {
                    b.Navigation("orderItems");
                });

            modelBuilder.Entity("Store.Core.Entities.ProductEntity.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Store.Core.Entities.ProductEntity.Product", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("Store.Core.Entities.AppUser", b =>
                {
                    b.Navigation("Address");
                });
#pragma warning restore 612, 618
        }
    }
}
