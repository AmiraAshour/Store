
using QuestPDF.Fluent;
using Store.Core.Entities.Order;
using System.Globalization;

namespace Store.Core.Services
{
  public class ReportPdfGenerator
  {

    public static byte[] GenerateDailyReport(DateTime date, IEnumerable<Orders>? orders, int? newUsersCount)
    {
      var items = orders?.SelectMany(o => o.orderItems ?? Array.Empty<OrderItem>()).ToList() ?? new List<OrderItem>();

      return Document.Create(container =>
      {
        container.Page(page =>
        {
          page.Margin(30);

          // Header
          page.Header().Text($"📅 Daily Report - {date:yyyy-MM-dd}")
              .FontSize(20).Bold().AlignCenter();

          // Content
          page.Content().PaddingVertical(10).Column(col =>
          {
            var totalOrders = orders?.Count() ?? 0;
            var totalRevenue = orders?.Sum(o => o.GetTotal()) ?? 0m;

            col.Item().Text($"📦 Orders Today: {totalOrders}").FontSize(14);
            col.Item().Text($"💰 Total Revenue: {totalRevenue.ToString("C", CultureInfo.InvariantCulture)}").FontSize(14);
            col.Item().Text($"👥 New Users: {newUsersCount?.ToString() ?? "N/A"}").FontSize(14);

            col.Item().PaddingVertical(12).Text("🛒 Sold Products").Bold().FontSize(16);

            if (items.Any())
            {
              col.Item().Table(table =>
              {
                table.ColumnsDefinition(columns =>
                {
                  columns.ConstantColumn(30);   // index
                  columns.RelativeColumn(3);    // product name
                  columns.RelativeColumn(1);    // qty
                  columns.RelativeColumn(1);    // price
                  columns.RelativeColumn(1);    // total
                });

                // Header row — use inline styling lambdas
                table.Header(header =>
                {
                  Action<QuestPDF.Infrastructure.IContainer> headerCellStyle =
                      c => c.DefaultTextStyle(x => x.SemiBold()).Padding(5).BorderBottom(1).BorderColor("#CCCCCC");

                  header.Cell().Element(c => { headerCellStyle(c); c.Text("#"); });
                  header.Cell().Element(c => { headerCellStyle(c); c.Text("Product"); });
                  header.Cell().Element(c => { headerCellStyle(c); c.Text("Qty"); });
                  header.Cell().Element(c => { headerCellStyle(c); c.Text("Price"); });
                  header.Cell().Element(c => { headerCellStyle(c); c.Text("Total"); });
                });

                // Rows
                int index = 1;
                foreach (var item in items)
                {
                  Action<QuestPDF.Infrastructure.IContainer> cellStyle =
                      c => c.Padding(5).BorderBottom(0.5f).BorderColor("#EEEEEE");

                  table.Cell().Element(c => { cellStyle(c); c.Text(index++.ToString()); });
                  table.Cell().Element(c => { cellStyle(c); c.Text(item.ProductName ?? "-"); });
                  table.Cell().Element(c => { cellStyle(c); c.Text(item.Quntity.ToString()); });
                  table.Cell().Element(c => { cellStyle(c); c.Text($"{item.Price:C}"); });
                  table.Cell().Element(c => { cellStyle(c); c.Text($"{(item.Price * item.Quntity):C}"); });
                
              }
              });
            }
            else
            {
              col.Item().Text("No products sold today.").Italic();
            }
          });

          // Footer
          page.Footer().AlignCenter().Text("Generated by Store System - " + DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm"));
        });
      }).GeneratePdf();
    }

    public static byte[] GenerateMonthlyReport(DateTime month, IEnumerable<Orders>? orders, int? newUsersCount)
    {
      var items = orders?.SelectMany(o => o.orderItems ?? Array.Empty<OrderItem>()).ToList() ?? new List<OrderItem>();

      return Document.Create(container =>
      {
        container.Page(page =>
        {
          page.Margin(30);

          page.Header().Text($"📅 Monthly Report - {month:MMMM yyyy}")
              .FontSize(20).Bold().AlignCenter();

          page.Content().PaddingVertical(10).Column(col =>
          {
            var totalOrders = orders?.Count() ?? 0;
            var totalRevenue = orders?.Sum(o => o.GetTotal()) ?? 0m;

            col.Item().Text($"📦 Orders This Month: {totalOrders}").FontSize(14);
            col.Item().Text($"💰 Total Revenue: {totalRevenue.ToString("C", CultureInfo.InvariantCulture)}").FontSize(14);
            col.Item().Text($"👥 New Users: {newUsersCount?.ToString() ?? "N/A"}").FontSize(14);

            col.Item().PaddingVertical(12).Text("🛒 Sold Products (Monthly)").Bold().FontSize(16);

            if (items.Any())
            {
              col.Item().Table(table =>
              {
                table.ColumnsDefinition(columns =>
                {
                  columns.ConstantColumn(30);
                  columns.RelativeColumn(3);
                  columns.RelativeColumn(1);
                  columns.RelativeColumn(1);
                  columns.RelativeColumn(1);
                });

                table.Header(header =>
                {
                  Action<QuestPDF.Infrastructure.IContainer> headerCellStyle =
                      c => c.DefaultTextStyle(x => x.SemiBold()).Padding(5).BorderBottom(1).BorderColor("#CCCCCC");

                  header.Cell().Element(c => { headerCellStyle(c); c.Text("#"); });
                  header.Cell().Element(c => { headerCellStyle(c); c.Text("Product"); });
                  header.Cell().Element(c => { headerCellStyle(c); c.Text("Qty"); });
                  header.Cell().Element(c => { headerCellStyle(c); c.Text("Price"); });
                  header.Cell().Element(c => { headerCellStyle(c); c.Text("Total"); });
                });

                // Rows
                int index = 1;
                foreach (var item in items)
                {
                  Action<QuestPDF.Infrastructure.IContainer> cellStyle =
                      c => c.Padding(5).BorderBottom(0.5f).BorderColor("#EEEEEE");

                  table.Cell().Element(c => { cellStyle(c); c.Text(index++.ToString()); });
                  table.Cell().Element(c => { cellStyle(c); c.Text(item.ProductName ?? "-"); });
                  table.Cell().Element(c => { cellStyle(c); c.Text(item.Quntity.ToString()); });
                  table.Cell().Element(c => { cellStyle(c); c.Text($"{item.Price:C}"); });
                  table.Cell().Element(c => { cellStyle(c); c.Text($"{(item.Price * item.Quntity):C}"); });
                }
              });
            }
            else
            {
              col.Item().Text("No products sold this month.").Italic();
            }
          });

          page.Footer().AlignCenter().Text("Generated by Store System - " + DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm"));
        });
      }).GeneratePdf();
    
  }

  }
}